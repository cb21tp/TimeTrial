runApp('timeTrialRealDataComplete.R')
runApp('timeTrialRealDataComplete.R')
runApp('timeTrialRealDataComplete.R')
runApp('timeTrialRealDataComplete.R')
runApp('timeTrialRealDataComplete.R')
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/QuestRscript/TimeCycle.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/QuestRscript/TimeCycle.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/QuestRscript/TimeCycle.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
97/4
97/8
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
TimeCycleResults
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
detach("package:parallel", unload=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
source('~/Desktop/BraunLab/Repos/TimeCycle/scripts/LumiData/reformateLumiDataForUse.R', echo=TRUE)
#Load Required Packages
pkg = c('ggplot2', 'plyr','tidyverse', 'gplots','grid','matrixStats', 'shiny', 'shinythemes',"pastecs", "pROC", "shinyjs", "UpSetR", "limma","eulerr","gridExtra")
lapply(pkg,library, character.only = TRUE)
load("~/Desktop/TimeTrial/TimeTrial_Apps/timeTrialAdjRealDataComplete.RData")
load("~/Desktop/TimeTrial/TimeTrial_Apps/timeTrialRealDataComplete.RData")
load("~/Desktop/TimeTrial/TimeTrial_Apps/timeTrialProcessTimeSeriesComplete.RData")
customScatterPlot <- function(x,y, title, xlim = c(0,40), ylim = c(0,40)){
# ,
plot(x,y, main = title, xlab = "-log(pVal)", ylab = "-log(pVal)", xlim = xlim, ylim = ylim , cex = .5, pch = 16, col = alpha("black",0.5), font = 2, font.lab = 2, asp = 1, cex.main=2)
abline(fit <- lm(y ~ x), col='red')
legend("topleft", bty="n", cex = 2, text.font = 2,legend=paste("Rank Corr:", format(cor(x,y,method = "spearman"), digits=3)))
points(x[geneID],y[geneID],pch = 21, bg = "orange",col = "black", cex =1.5)
box(lwd = 3)
}
schemeScatterPlotFormat <- function(dataS1,dataS2){
labels <- c("1","2A","2B","4A","4B","4C","4D","2","4A","4B","2","4A","4B")
par(mar = c(2,2,2,2), oma=c(7,7,1,1))
customScatterPlot(-log(results[[1]][,dataS1]), -log(results[[1]][,dataS2]), "ARSER")
mtext(labels[dataS2], side=2, line=7, adj = -0.25, cex=1.5, font = 2)
mtext("-log(pVal)", side=2, line=4, cex=1.5, font = 2)
customScatterPlot(-log(results[[2]][,dataS1]), -log(results[[2]][,dataS2]), "BooteJTK")
customScatterPlot(-log(results[[3]][,dataS1]), -log(results[[3]][,dataS2]), "JTK_Cycle")
mtext("-log(pVal)", side=2, line=4, cex=1.5, font = 2)
mtext("-log(pVal)", side=1, line=4, cex=1.5, font = 2)
customScatterPlot(-log(results[[4]][,dataS1]), -log(results[[4]][,dataS2]), "RAIN")
mtext(labels[dataS1], side=1, line=7, adj = -0.25, cex=1.5, font = 2)
mtext("-log(pVal)", side=1, line=4, cex=1.5, font = 2)
}
vennPlotsSet <- function(df, method, pval, logFC, colnames){
methodNames <- c("Arser", "BooteJTK", "JTK_Cycle", "RAIN")
p <- getpValGeneList(df[[method]], pval, logFC)
countsVenn <- vennCounts(fromList(p[colnames]))
#Unique to 2 Counts
uniqueTo2h <- which(countsVenn[,1] == 1 & countsVenn[,2] == 0 & countsVenn[,3] == 0 )
`2Count` <- countsVenn[uniqueTo2h,4]
#Unique to 2 and 4, but not in 4 alone Counts
uniqueTo2and4h <- which(countsVenn[,1] == 1 & (countsVenn[,2] == 1 | countsVenn[,3] == 1))
`24Count` <- sum(countsVenn[uniqueTo2and4h,4])
#Unique only to 4 Counts
`4Count` <- sum(countsVenn[which(countsVenn[,1] == 0),4])
# Plot Euler Gram
eulerr_options(font = 2)
par(mar = c(4,4,4,4))
v <- euler(c(`2h` = `2Count`,`4h` = `4Count`,"2h&4h"= `24Count`))
plot(v,
fills = list(fill = c("grey90","orange","#377eb8"), alpha = 1),
labels = list(col = "Black", font = 4, fontsize = 40),
quantities = list(TRUE,col = "Black", font = 2, fontsize = 30),
lty = 1:2,
lwd = 6,
edge = F,
main = list(label = methodNames[method], font = 2, fontsize = 20))
}
getpValGeneList <- function(df, pval,foldC = 0){
colnames <- c("Hogenesch_1","Hogenesch_2A","Hogenesch_2B","Hogenesch_4A","Hogenesch_4B","Hogenesch_4C","Hogenesch_4D","Hughes_2","Hughes_4A","Hughes_4B","Zhang_2","Zhang_4A","Zhang_4B")
names <- rownames(df)
pVals <- apply(df < pval, 2, function(x) names[x])
foldChanges <- lapply(data,function(x){getFoldChangeGeneList(x,foldC)})
#get Intersection between the pVal and foldChange Gene List
reducedGeneList <- sapply(1:length(data), function(i){
Reduce(intersect,list(pVals[[i]] , foldChanges[[i]]))
})
names(reducedGeneList) <- colnames
return(reducedGeneList)
}
getFoldChangeGeneList <- function(df,fc){
names <- rownames(df)
output <- apply(df,1,function(x){
min_max <- range(x)
return(abs(min_max[2]-min_max[1]) > fc)
})
names[which(output)]
}
## --------------------------------------------- Plot 2A ----------------------------------#
ds <- 8 # 0 or 3
method <- 1
scheme <- 1
geneID <- 7795
layout(matrix(c(1,1,1,2,2,2,0,5,5,5,
1,1,1,2,2,2,0,5,5,5,
1,1,1,2,2,2,0,6,6,6,
3,3,3,4,4,4,0,6,6,6,
3,3,3,4,4,4,0,7,7,7,
3,3,3,4,4,4,0,7,7,7), 6, 10, byrow = TRUE))
schemeScatterPlotFormat(8,9)
#Plot the Time Series Data For Selected Gene
labels <- c("2","4A","4B")
for(i in 0:2){
plotData <- data[[(ds+i)]][geneID,]
tp <- as.numeric(gsub(pattern = "ZT",replacement = "",x = colnames(plotData)))
vals <- as.vector(unlist(plotData))
plot(tp,vals,"o", cex = 2, lwd = 2, pch = 16, col = "black", font = 2, font.lab = 2,
main = paste0("Sampling Scheme ",labels[i+1]), cex.main=2)
points(tp,vals,col = "orange", pch = 16)
if (i == 1){
mtext("Expression", side=2, line=4, cex=2, font = 2)
}
box(lwd = 3)
}
mtext("ZT Time Point", side=1, line=4, cex=2, font = 2)
# GENERATE THE PLOTS
plot1 <- vennPlotsSet(resultsAdj, 1, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot2 <- vennPlotsSet(resultsAdj, 2, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot3 <- vennPlotsSet(resultsAdj, 3, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot4 <- vennPlotsSet(resultsAdj, 4, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
lay <- rbind(c(NA,NA),
c(1,2),
c(NA,NA),
c(3,4))
gridExtra::grid.arrange(plot1, plot2,plot3,plot4, top=textGrob("Zhang Dataset | FDR < 0.05", gp=gpar(fontsize=30,font=2)), layout_matrix = lay, heights=unit(c(10,4,3,4), c("mm", "in","mm","in")))
x <- vennPlotsSet(resultsAdj, 1, 0.05, 0, c("Hughes_2","Hughes_4A","Hughes_4B"))
y <- vennPlotsSet(resultsAdj, 2, 0.05, 0, c("Hughes_2","Hughes_4A","Hughes_4B"))
z <- vennPlotsSet(resultsAdj, 3, 0.05, 0, c("Hughes_2","Hughes_4A","Hughes_4B"))
q <- vennPlotsSet(resultsAdj, 4, 0.05, 0, c("Hughes_2","Hughes_4A","Hughes_4B"))
gridExtra::grid.arrange(x,y,z,q, bottom=textGrob("FDR < 0.05  |  LogFC = 0", gp=gpar(fontsize=15,font=2)))
vennPlotsSet(resultsAdj, 1, 0.05, 1, c("Hughes_2","Hughes_4A","Hughes_4B"))
vennPlotsSet(resultsAdj, 2, 0.05, 1, c("Hughes_2","Hughes_4A","Hughes_4B"))
vennPlotsSet(resultsAdj, 3, 0.05, 1, c("Hughes_2","Hughes_4A","Hughes_4B"))
vennPlotsSet(resultsAdj, 4, 0.05, 1, c("Hughes_2","Hughes_4A","Hughes_4B"))
vennPlotsSet(resultsAdj, 1, 0.05, 2, c("Hughes_2","Hughes_4A","Hughes_4B"))
vennPlotsSet(resultsAdj, 2, 0.05, 2, c("Hughes_2","Hughes_4A","Hughes_4B"))
vennPlotsSet(resultsAdj, 3, 0.05, 2, c("Hughes_2","Hughes_4A","Hughes_4B"))
vennPlotsSet(resultsAdj, 4, 0.05, 2, c("Hughes_2","Hughes_4A","Hughes_4B"))
vennPlotsSet(resultsAdj, 1, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
vennPlotsSet(resultsAdj, 2, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
vennPlotsSet(resultsAdj, 3, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
vennPlotsSet(resultsAdj, 4, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot1 <- vennPlotsSet(resultsAdj, 1, c(5,6,7), 0.05, 2, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot2 <- vennPlotsSet(resultsAdj, 2, c(5,6,7), 0.05, 2, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot3 <- vennPlotsSet(resultsAdj, 3, c(5,6,7), 0.05, 2, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot4 <- vennPlotsSet(resultsAdj, 4, c(5,6,7), 0.05, 2, c("Zhang_2","Zhang_4A","Zhang_4B"))
gridExtra::grid.arrange(plot1,plot2,plot3,plot4, top=textGrob("Zhang Dataset | FDR < 0.05  |  LogFC > 2", gp=gpar(fontsize=15,font=2)))
## --------------------------------------------- OTHER UPSET PLOTS ----------------------------------#
plotUpset <- function(df,showPlot = T, method = 1){
methodNames <- c("Arser", "BooteJTK", "JTK_Cycle", "RAIN")
#identify the Cycling Genes in the Dataset
Cycle <- c("Per1","Per2","Per3","Cry1","Cry2","Npas2","Clock","Arntl","Arntl2")
Genes <- unique(unlist(df))
collected <- as.numeric(Genes %in% Cycle)
Cyclers <- c(0,2)[collected+1]
#Bind Data together to Use for Plotting
data <- cbind(fromList(df),Cyclers)
#find largest Common Interaction Between Genes
#set Up the Query
dataQuery <- list(
list(query = intersects,
params = c("Zhang_4A"),
color = "orange",
active = T,
query.name = "4h"),
list(query = intersects,
params = c("Zhang_4B"),
color = "orange",
active = T,
query.name = ""),
list(query = intersects,
params = c("Zhang_4A","Zhang_4B"),
color = "orange",
active = T,
query.name = ""),
list(query = intersects,
params = c("Zhang_2","Zhang_4A","Zhang_4B"),
color = "blue",
active = T,
query.name = "2h and 4h"),
list(query = intersects,
params = c("Zhang_2","Zhang_4A"),
color = "blue",
active = T,
query.name = ""),
list(query = intersects,
params = c("Zhang_2","Zhang_4B"),
color = "blue",
active = T,
query.name = ""))
upset(data,nsets = 7,
order.by = "freq",
mb.ratio = c(0.6, 0.4),
number.angles = 0,
text.scale = 1.1,
point.size = 2.8,
set_size.show = T,
line.size = 1,
set_size.scale_max = 8000,
query.legend = "bottom",
empty.intersections = F,
group.by = "degree",
queries = dataQuery
)
}
# #Arser
p <- getpValGeneList(resultsAdj[[1]], c(5,6,7), 0.05, 1, c("Zhang_2","Zhang_4A","Zhang_4B"))
plotUpset(p, method = 1)
p <- getpValGeneList(resultsAdj[[1]], c(11,12,13), 0.05, 1, c("Zhang_2","Zhang_4A","Zhang_4B"))
# code for generating Figure 2
#Load Required Packages
pkg = c('ggplot2', 'plyr','tidyverse', 'gplots','grid','matrixStats', 'shiny', 'shinythemes',"pastecs", "pROC", "shinyjs", "UpSetR", "limma","eulerr","gridExtra")
lapply(pkg,library, character.only = TRUE)
load("~/Desktop/TimeTrial/TimeTrial_Apps/timeTrialAdjRealDataComplete.RData")
load("~/Desktop/TimeTrial/TimeTrial_Apps/timeTrialRealDataComplete.RData")
load("~/Desktop/TimeTrial/TimeTrial_Apps/timeTrialProcessTimeSeriesComplete.RData")
customScatterPlot <- function(x,y, title, xlim = c(0,40), ylim = c(0,40)){
# ,
plot(x,y, main = title, xlab = "-log(pVal)", ylab = "-log(pVal)", xlim = xlim, ylim = ylim , cex = .5, pch = 16, col = alpha("black",0.5), font = 2, font.lab = 2, asp = 1, cex.main=2)
abline(fit <- lm(y ~ x), col='red')
legend("topleft", bty="n", cex = 2, text.font = 2,legend=paste("Rank Corr:", format(cor(x,y,method = "spearman"), digits=3)))
points(x[geneID],y[geneID],pch = 21, bg = "orange",col = "black", cex =1.5)
box(lwd = 3)
}
schemeScatterPlotFormat <- function(dataS1,dataS2){
labels <- c("1","2A","2B","4A","4B","4C","4D","2","4A","4B","2","4A","4B")
par(mar = c(2,2,2,2), oma=c(7,7,1,1))
customScatterPlot(-log(results[[1]][,dataS1]), -log(results[[1]][,dataS2]), "ARSER")
mtext(labels[dataS2], side=2, line=7, adj = -0.25, cex=1.5, font = 2)
mtext("-log(pVal)", side=2, line=4, cex=1.5, font = 2)
customScatterPlot(-log(results[[2]][,dataS1]), -log(results[[2]][,dataS2]), "BooteJTK")
customScatterPlot(-log(results[[3]][,dataS1]), -log(results[[3]][,dataS2]), "JTK_Cycle")
mtext("-log(pVal)", side=2, line=4, cex=1.5, font = 2)
mtext("-log(pVal)", side=1, line=4, cex=1.5, font = 2)
customScatterPlot(-log(results[[4]][,dataS1]), -log(results[[4]][,dataS2]), "RAIN")
mtext(labels[dataS1], side=1, line=7, adj = -0.25, cex=1.5, font = 2)
mtext("-log(pVal)", side=1, line=4, cex=1.5, font = 2)
}
vennPlotsSet <- function(df, method, pval, logFC, colnames){
methodNames <- c("Arser", "BooteJTK", "JTK_Cycle", "RAIN")
p <- getpValGeneList(df[[method]], pval, logFC)
countsVenn <- vennCounts(fromList(p[colnames]))
#Unique to 2 Counts
uniqueTo2h <- which(countsVenn[,1] == 1 & countsVenn[,2] == 0 & countsVenn[,3] == 0 )
`2Count` <- countsVenn[uniqueTo2h,4]
#Unique to 2 and 4, but not in 4 alone Counts
uniqueTo2and4h <- which(countsVenn[,1] == 1 & (countsVenn[,2] == 1 | countsVenn[,3] == 1))
`24Count` <- sum(countsVenn[uniqueTo2and4h,4])
#Unique only to 4 Counts
`4Count` <- sum(countsVenn[which(countsVenn[,1] == 0),4])
# Plot Euler Gram
eulerr_options(font = 2)
par(mar = c(4,4,4,4))
v <- euler(c(`2h` = `2Count`,`4h` = `4Count`,"2h&4h"= `24Count`))
plot(v,
fills = list(fill = c("grey90","orange","#377eb8"), alpha = 1),
labels = list(col = "Black", font = 4, fontsize = 40),
quantities = list(TRUE,col = "Black", font = 2, fontsize = 30),
lty = 1:2,
lwd = 6,
edge = F,
main = list(label = methodNames[method], font = 2, fontsize = 20))
}
getpValGeneList <- function(df, pval,foldC = 0){
colnames <- c("Hogenesch_1","Hogenesch_2A","Hogenesch_2B","Hogenesch_4A","Hogenesch_4B","Hogenesch_4C","Hogenesch_4D","Hughes_2","Hughes_4A","Hughes_4B","Zhang_2","Zhang_4A","Zhang_4B")
names <- rownames(df)
pVals <- apply(df < pval, 2, function(x) names[x])
foldChanges <- lapply(data,function(x){getFoldChangeGeneList(x,foldC)})
#get Intersection between the pVal and foldChange Gene List
reducedGeneList <- sapply(1:length(data), function(i){
Reduce(intersect,list(pVals[[i]] , foldChanges[[i]]))
})
names(reducedGeneList) <- colnames
return(reducedGeneList)
}
getFoldChangeGeneList <- function(df,fc){
names <- rownames(df)
output <- apply(df,1,function(x){
min_max <- range(x)
return(abs(min_max[2]-min_max[1]) > fc)
})
names[which(output)]
}
## --------------------------------------------- Plot 2A ----------------------------------#
ds <- 8 # 0 or 3
method <- 1
scheme <- 1
geneID <- 7795
layout(matrix(c(1,1,1,2,2,2,0,5,5,5,
1,1,1,2,2,2,0,5,5,5,
1,1,1,2,2,2,0,6,6,6,
3,3,3,4,4,4,0,6,6,6,
3,3,3,4,4,4,0,7,7,7,
3,3,3,4,4,4,0,7,7,7), 6, 10, byrow = TRUE))
schemeScatterPlotFormat(8,9)
#Plot the Time Series Data For Selected Gene
labels <- c("2","4A","4B")
for(i in 0:2){
plotData <- data[[(ds+i)]][geneID,]
tp <- as.numeric(gsub(pattern = "ZT",replacement = "",x = colnames(plotData)))
vals <- as.vector(unlist(plotData))
plot(tp,vals,"o", cex = 2, lwd = 2, pch = 16, col = "black", font = 2, font.lab = 2,
main = paste0("Sampling Scheme ",labels[i+1]), cex.main=2)
points(tp,vals,col = "orange", pch = 16)
if (i == 1){
mtext("Expression", side=2, line=4, cex=2, font = 2)
}
box(lwd = 3)
}
mtext("ZT Time Point", side=1, line=4, cex=2, font = 2)
## --------------------------------------------- Plot 2B ----------------------------------#
# GENERATE THE PLOTS
plot1 <- vennPlotsSet(resultsAdj, 1, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot2 <- vennPlotsSet(resultsAdj, 2, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot3 <- vennPlotsSet(resultsAdj, 3, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
plot4 <- vennPlotsSet(resultsAdj, 4, 0.05, 0, c("Zhang_2","Zhang_4A","Zhang_4B"))
lay <- rbind(c(NA,NA),
c(1,2),
c(NA,NA),
c(3,4))
gridExtra::grid.arrange(plot1, plot2,plot3,plot4, top=textGrob("Zhang Dataset | FDR < 0.05", gp=gpar(fontsize=30,font=2)), layout_matrix = lay, heights=unit(c(10,4,3,4), c("mm", "in","mm","in")))
makeROCplot <- function(myfiles,temp,info,col48){
#Calculate the AUC Score for Plotting
vec <- as.list(1:length(temp))
plotData <- lapply(vec, function(x) {GetInfo(myfiles[[x]],temp[x],data$V1)})
plotData <- data.frame(matrix(unlist(plotData), nrow=length(vec), byrow=T))
plotData$Method <- "BooteJTK_Concat"
colnames(plotData) <- c("Rate","Length","Noise","Rep","AUC", "Method")
##########################################################################################
#PLOT ROC CURVEs for each sample
##########################################################################################
if(col48){
cols <-c("#e97b43", "#f39041","grey" , "#faa540", "#ffbb41")
}else{
cols <-c("#929292","#5f5f5f","#000000","#313131","#000000")
}
ltyP <- c(1,1,0,3,3)
category <- c(rep(1,7000),rep(0,4000))
count <- 1
ROCcurves <- lapply(myfiles,function(x){
#reorder the datalist to fit order of sin_1 to decay_11000
rownames(x) <- x$ID
dataOutput <- x[as.character(dataNames),]
prediction <- as.numeric(dataOutput$GammaBH)
roc_obj <- roc(category, prediction)
colSel <- count %% 5
if(colSel == 0){
colSel = 5
}
if(count %% 5 == 1){
Rep <- info$Rep[count]
Length <- info$Length[count]
Rate <- info$Rate[count]
plot(roc_obj, col = cols[colSel], main = paste("Length:",Length, "Interval:",Rate, "Rep:",Rep), lty = ltyP[colSel], lwd = 4, cex.lab = 1.25,
cex.axis = 1.5,
font.lab = 2,
font.axis = 2,
cex.main = 2)
} else{
lines(roc_obj,col = cols[colSel], lty = ltyP[colSel], lwd = 4)
}
count <<- count + 1
})
}
GetInfo <- function(datalist,fileNames, dataNames){
#sample Interval, Length, nL, rep
info <- as.numeric(unlist(regmatches(fileNames,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",fileNames))))
info <- info[1:4]
#reorder the datalist to fit order of sin_1 to decay_11000
rownames(datalist) <- datalist$ID
dataOutput <- datalist[as.character(dataNames),]
#Get BH corrected pVal
pVals.adj <- dataOutput$GammaBH
#get AUC score
category <- c(rep(1,7000),rep(0,4000))
prediction <- pVals.adj
roc_obj <- roc(category, prediction)
output <- c(info,roc_obj$auc)
names(output) <- c("intr","length", "nL", "rep", "auc")
return(round(output,3))
}
#load order of waveforms from data i.e sin_1 to decay_11000
#BooteJTK reorders sorting by highest to lowest pvalue
data <- read.table("~/Desktop/TimeTrial/Data/Processed/BooteJTK/Concat_Experiments/8_96_NoiseLV_0_BioRep_2.txt", quote="\"")
dataNames <- data$V1
setwd("~/Desktop/TimeTrial/Results/SyntheticData/BooteJTK/con/")
#Load List of Text Files
temp <- list.files(pattern="*.txt")
info <- as.numeric(unlist(regmatches(temp,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",temp))))
info <- info[rep(c(rep(T,4),rep(F,2)),length(info)/6)]
info <- matrix(data = info, ncol = 4,byrow=TRUE)
info <- data.frame(temp,info)
colnames(info) <- c("name","Rate","Length","NoiseLv","Rep")
sel <- which(info$Rate == 2 & info$Length == 24 & info$Rep == 3)
Con24temp <- temp[sel]
Con24info <- info[sel,]
Con24Data <- lapply(Con24temp, read.delim)
makeROCplot(myfiles = Con24Data,temp = Con24temp, info = Con24info, col48 = F)
#load Libraries
library("pROC")
#################################
#Function for Creating ROC plots
#################################
makeROCplot <- function(myfiles,temp,info,col48){
#Calculate the AUC Score for Plotting
vec <- as.list(1:length(temp))
plotData <- lapply(vec, function(x) {GetInfo(myfiles[[x]],temp[x],data$V1)})
plotData <- data.frame(matrix(unlist(plotData), nrow=length(vec), byrow=T))
plotData$Method <- "BooteJTK_Concat"
colnames(plotData) <- c("Rate","Length","Noise","Rep","AUC", "Method")
#################################
#PLOT ROC CURVEs for each sample
#################################
if(col48){
cols <-c("#e97b43", "#f39041","grey" , "#faa540", "#ffbb41")
}else{
cols <-c("#929292","#5f5f5f","#000000","#313131","#000000")
}
ltyP <- c(1,1,0,3,3)
category <- c(rep(1,7000),rep(0,4000))
count <- 1
ROCcurves <- lapply(myfiles,function(x){
#reorder the datalist to fit order of sin_1 to decay_11000
rownames(x) <- x$ID
dataOutput <- x[as.character(dataNames),]
prediction <- as.numeric(dataOutput$GammaBH)
roc_obj <- roc(category, prediction)
colSel <- count %% 5
if(colSel == 0){
colSel = 5
}
if(count %% 5 == 1){
Rep <- info$Rep[count]
Length <- info$Length[count]
Rate <- info$Rate[count]
plot(roc_obj, col = cols[colSel], main = paste("Length:",Length, "Interval:",Rate, "Rep:",Rep), lty = ltyP[colSel], lwd = 4, cex.lab = 1.25,
cex.axis = 1.5,
font.lab = 2,
font.axis = 2,
cex.main = 2)
} else{
lines(roc_obj,col = cols[colSel], lty = ltyP[colSel], lwd = 4)
}
count <<- count + 1
})
}
GetInfo <- function(datalist,fileNames, dataNames){
#sample Interval, Length, nL, rep
info <- as.numeric(unlist(regmatches(fileNames,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",fileNames))))
info <- info[1:4]
#reorder the datalist to fit order of sin_1 to decay_11000
rownames(datalist) <- datalist$ID
dataOutput <- datalist[as.character(dataNames),]
#Get BH corrected pVal
pVals.adj <- dataOutput$GammaBH
#get AUC score
category <- c(rep(1,7000),rep(0,4000))
prediction <- pVals.adj
roc_obj <- roc(category, prediction)
output <- c(info,roc_obj$auc)
names(output) <- c("intr","length", "nL", "rep", "auc")
return(round(output,3))
}
#load order of waveforms from data i.e sin_1 to decay_11000
#BooteJTK reorders sorting by highest to lowest pvalue
data <- read.table("~/Desktop/TimeTrial/Data/Processed/BooteJTK/Concat_Experiments/8_96_NoiseLV_0_BioRep_2.txt", quote="\"")
dataNames <- data$V1
setwd("~/Desktop/TimeTrial/Results/SyntheticData/BooteJTK/con/")
#Load List of Text Files
temp <- list.files(pattern="*.txt")
info <- as.numeric(unlist(regmatches(temp,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",temp))))
info <- info[rep(c(rep(T,4),rep(F,2)),length(info)/6)]
info <- matrix(data = info, ncol = 4,byrow=TRUE)
info <- data.frame(temp,info)
colnames(info) <- c("name","Rate","Length","NoiseLv","Rep")
sel <- which(info$Rate == 2 & info$Length == 24 & info$Rep == 3)
Con24temp <- temp[sel]
Con24info <- info[sel,]
Con24Data <- lapply(Con24temp, read.delim)
makeROCplot(myfiles = Con24Data,temp = Con24temp, info = Con24info, col48 = F)
setwd("~/Desktop/TimeTrial/Results/SyntheticData/BooteJTK/avg/")
#Load List of Text Files
temp <- list.files(pattern="*.txt")
info <- as.numeric(unlist(regmatches(temp,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",temp))))
info <- info[rep(c(rep(T,4),rep(F,2)),length(info)/6)]
info <- matrix(data = info, ncol = 4,byrow=TRUE)
info <- data.frame(temp,info)
colnames(info) <- c("name","Rate","Length","NoiseLv","Rep")
sel <- which(info$Rate == 4 & info$Length == 48 & info$Rep == 3)
Avg48temp <- temp[sel]
Avg48info <- info[sel,]
Avg48Data <- lapply(Avg48temp, read.delim)
makeROCplot(myfiles = Avg48Data,temp = Avg48temp, info = Avg48info, col48 = T)
source('~/Desktop/TimeTrial/Scripts/Paper_Figures/Plot2AB.R', echo=TRUE)
source('~/Desktop/TimeTrial/Scripts/Paper_Figures/Plot3AB.R', echo=TRUE)
